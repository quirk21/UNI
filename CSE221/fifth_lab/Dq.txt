You are given a directed unweighted graph with N
 nodes and M
 edges. The nodes are numbered from 1
 to N
. The graph contains no self-loops or multiple edges.

You have to find a shortest path from node S
 to node D
 that passes through node K
. If multiple such paths exist, print any one of them. If no such path exists, print −1
.

Input
The first line contains five integers N,M,S,D,K
 (1≤N≤2×105,1≤M≤3×105,1≤S,
D,K≤N)
 — the number of vertices, total number of edges, source, destination and the mandatory node that must be included in the path.

The next M
 lines will contain two integers ui,vi(1≤ui,vi≤N)
 — denoting there is an edge from city ui
 to city vi
.

Output
If a valid path exists from S
 to D
 through K
, print the length of the path (number of edges) on the first line.
On the second line, print the nodes in the path in order from S
 to D
.
If no such path exists, print −1
.
Examples
InputCopy
5 10 5 3 5
2 5
5 1
4 5
3 5
1 2
2 4
3 2
1 4
1 3
3 4
OutputCopy
2
5 1 3
InputCopy
5 4 2 5 3
5 1
3 1
2 3
2 4
OutputCopy
-1
InputCopy
8 7 3 2 4
7 2
6 7
7 3
2 4
1 2
8 4
5 1
OutputCopy
-1
InputCopy
6 6 2 2 2
5 1
1 2
1 4
5 2
4 5
3 2
OutputCopy
0
2