Here is a Pseudocode of the Merge Sort Algorithm.

def merge(a, b):
    # write your code here
    # a and b are two sorted list
    # merge function will return a sorted list after merging a and b

def mergeSort(arr):
    if len(arr) <= 1:
        return arr
    else:
        mid = len(arr)//2
        a1 = mergeSort(............)  # write the parameter 
        a2 = mergeSort(............)  # write the parameter
        return merge(a1, a2)          # complete the merge function above 

Now, you are given an array A of size N of N distinct integers. It is guaranteed that the array A contains a permutation of integers from 1 to N (i.e., every integer from 1 to N appears exactly once).

Count the number of inversions in the given array.
Sort the array in non-decreasing order.
An inversion is a pair (i,j) where i<j and A[i]>A[j].

Input
The first line contains an integer N (1≤N≤105) — denoting the length of the list.

In the next line, there will be N integers a1,a2,a3…an (1≤ai≤N) separated by spaces.

Output
In the first line, print the total number of inversions in the given array. In the next line, print the array in non-decreasing order.

Examples
InputCopy
5
1 2 5 4 3
OutputCopy
3
1 2 3 4 5 
InputCopy
5
1 2 3 4 5
OutputCopy
0
1 2 3 4 5 
InputCopy
5
5 4 3 2 1
OutputCopy
10
1 2 3 4 5 
InputCopy
7
6 4 2 5 7 3 1
OutputCopy
14
1 2 3 4 5 6 7 

Note
In the first example, the inversions are pair (3,4),(3,5) and (1,5)

In the second example, there are no inversions.

In the third example, every pair of i,j where i<j, we have A[i]>A[j]. Hence, All 10 such pairs are inversions.